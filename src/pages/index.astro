---
import Layout from '../layouts/Layout.astro';
import ArgumentCard from '../components/ArgumentCard.svelte';
import LanguageSelector from '../components/LanguageSelector.svelte';
import { getLangFromUrl, getTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = getTranslations(lang);

const marketingArgs = [
  {
    emoji: "üîç",
    title: t.marketing.explore.title,
    description: t.marketing.explore.description,
    buttonText: t.marketing.explore.button
  },
  {
    emoji: "‚ú®",
    title: t.marketing.desires.title,
    description: t.marketing.desires.description,
    buttonText: t.marketing.desires.button
  },
  {
    emoji: "üéØ",
    title: t.marketing.practice.title,
    description: t.marketing.practice.description,
    buttonText: t.marketing.practice.button
  },
  {
    emoji: "üîí",
    title: t.marketing.privacy.title,
    description: t.marketing.privacy.description,
    buttonText: t.marketing.privacy.button
  },
  {
    emoji: "üíù",
    title: t.marketing.wellbeing.title,
    description: t.marketing.wellbeing.description,
    buttonText: t.marketing.wellbeing.button
  },
  {
    emoji: "üåü",
    title: t.marketing.joy.title,
    description: t.marketing.joy.description,
    buttonText: t.marketing.joy.button
  }
];
---

<Layout title={t.nav.logo}>
  <!-- Full-height hero section -->
  <section class="min-h-screen flex flex-col items-center justify-center relative px-4 py-20">
    <div class="absolute top-4 right-4 z-50">
      <LanguageSelector currentLang={lang} client:load />
    </div>

    <div class="text-center max-w-3xl mx-auto">
      <h1 class="text-4xl md:text-6xl font-bold text-white mb-6 animate-fade-in">
        {t.hero.title}
      </h1>
      <p class="text-xl md:text-2xl text-white/90 leading-relaxed mb-8 animate-fade-in-delay">
        {t.hero.subtitle}
      </p>
      <button class="main-cta animate-fade-in-delay-2">
        {t.cta.main}
      </button>
    </div>

    <!-- Scroll indicator -->
    <div class="absolute bottom-8 animate-bounce">
      <div class="flex flex-col items-center text-white/60">
        <span class="text-sm mb-2">Scroll to explore</span>
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
        </svg>
      </div>
    </div>
  </section>

  <!-- Marketing Arguments Section -->
  <section class="bg-black/30 backdrop-blur-md py-20 px-4">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 max-w-6xl mx-auto">
      {marketingArgs.map((arg) => (
        <div class="transform transition-all duration-300 hover:-translate-y-1 hover:shadow-xl">
          <ArgumentCard
            client:load
            {...arg}
          />
        </div>
      ))}
    </div>
  </section>

  <!-- Social Connection Section -->
  <section class="bg-purple-900/20 backdrop-blur-md py-20 px-4 text-center">
    <h2 class="text-3xl md:text-4xl font-light text-white mb-8">Connect With Us</h2>
    <div class="flex justify-center gap-6">
      <SocialIcons snapchatUsername="your_snapchat" client:load />
      <!-- Add other social icons as needed -->
    </div>
  </section>

  <!-- Stats Section -->
  <section class="bg-white/5 backdrop-blur-md py-20 px-4">
    <div class="container mx-auto">
      <div class="grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto text-center">
        {/* Your existing stats */}
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer class="border-t border-white/10 py-8">
    <div class="container mx-auto px-4">
      <div class="text-center text-white/60">
        <p class="text-sm mb-2">{t.footer.legal}</p>
        <p class="text-xs">&copy; {new Date().getFullYear()} ConnectMe. {t.footer.copyright}</p>
      </div>
    </div>
  </footer>
</Layout>

<style>
  .animate-fade-in {
    animation: fadeIn 1s ease-out forwards;
  }

  .animate-fade-in-delay {
    animation: fadeIn 1s ease-out 0.3s forwards;
    opacity: 0;
  }

  .animate-fade-in-delay-2 {
    animation: fadeIn 1s ease-out 0.6s forwards;
    opacity: 0;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .main-cta {
    @apply bg-white text-purple-700;
    @apply px-10 py-4;
    @apply rounded-full;
    @apply text-lg font-semibold;
    @apply shadow-lg;
    @apply transform transition-all duration-300;
    @apply hover:shadow-xl hover:-translate-y-1;
    @apply active:scale-95;
  }

  /* Smooth scrolling for the whole page */
  :global(html) {
    scroll-behavior: smooth;
  }

  /* Create a snap-scrolling effect */
  :global(body) {
    scroll-snap-type: y proximity;
  }

  section {
    scroll-snap-align: start;
  }
</style>

<script>
  // Add type annotations for the event listener
  document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener('click', function(this: HTMLAnchorElement, e: MouseEvent) {
      e.preventDefault();
      const href = this.getAttribute('href');
      if (!href) return;
      document.querySelector(href)?.scrollIntoView({
        behavior: 'smooth'
      });
    });
  });

  // Add types for Intersection Observer
  const observer = new IntersectionObserver(
    (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fadeIn');
        }
      });
    },
    { threshold: 0.1 }
  );

  // Add type for card elements
  document.querySelectorAll<HTMLElement>('.card').forEach((card) => {
    observer.observe(card);
  });
</script>
