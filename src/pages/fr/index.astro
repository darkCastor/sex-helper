---
import Layout from '../../layouts/Layout.astro';
import ArgumentCard from '../../components/ArgumentCard.svelte';
import LanguageSelector from '../../components/LanguageSelector.svelte';
import { getLangFromUrl, getTranslations } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = getTranslations(lang);

const marketingArgs = [
  {
    emoji: "üîç",
    title: t.marketing.explore.title,
    description: t.marketing.explore.description,
    buttonText: t.marketing.explore.button
  },
  {
    emoji: "‚ú®",
    title: t.marketing.desires.title,
    description: t.marketing.desires.description,
    buttonText: t.marketing.desires.button
  },
  {
    emoji: "üéØ",
    title: t.marketing.practice.title,
    description: t.marketing.practice.description,
    buttonText: t.marketing.practice.button
  },
  {
    emoji: "üîí",
    title: t.marketing.privacy.title,
    description: t.marketing.privacy.description,
    buttonText: t.marketing.privacy.button
  },
  {
    emoji: "üíù",
    title: t.marketing.wellbeing.title,
    description: t.marketing.wellbeing.description,
    buttonText: t.marketing.wellbeing.button
  },
  {
    emoji: "üåü",
    title: t.marketing.joy.title,
    description: t.marketing.joy.description,
    buttonText: t.marketing.joy.button
  }
];
---

<Layout title="ConnectMe">
  <nav>
    <div class="container mx-auto px-4">
      <div class="flex justify-between items-center">
        <div class="logo">{t.nav.logo}</div>
        <div class="flex items-center gap-4">
          <LanguageSelector currentLang={lang} client:load />
          <button class="nav-cta">{t.nav.join}</button>
        </div>
      </div>
    </div>
  </nav>

  <section class="container mx-auto px-4 pt-12 pb-8 md:pt-20 md:pb-16">
    <div class="text-center max-w-3xl mx-auto mb-12 md:mb-20">
      <h1 class="text-3xl md:text-5xl font-semibold text-white mb-6">
        {t.hero.title}
      </h1>
      <p class="text-lg md:text-xl text-white leading-relaxed">
        {t.hero.subtitle}
      </p>
    </div>

    <!-- Cards Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 max-w-6xl mx-auto">
      {marketingArgs.map((arg) => (
        <div class="transform transition-all duration-300 hover:-translate-y-1 hover:shadow-xl">
          <ArgumentCard
            client:load
            {...arg}
          />
        </div>
      ))}
    </div>

    <!-- CTA Section -->
    <div class="mt-16 md:mt-24 text-center">
      <button class="main-cta">
        {t.cta.main}
      </button>
      <p class="mt-4 text-white/80 text-sm">{t.cta.subtitle}</p>
    </div>
  </section>

  <!-- Trust Indicators -->
  <section class="bg-white/5 backdrop-blur-md border-t border-white/10 py-12 mt-20">
    <div class="container mx-auto px-4">
      <div class="grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto text-center">
        <div class="flex flex-col items-center">
          <span class="text-2xl md:text-3xl font-light text-white mb-2">{t.stats.members.value}</span>
          <span class="text-white/70 text-sm">{t.stats.members.label}</span>
        </div>
        <div class="flex flex-col items-center">
          <span class="text-2xl md:text-3xl font-light text-white mb-2">{t.stats.satisfaction.value}</span>
          <span class="text-white/70 text-sm">{t.stats.satisfaction.label}</span>
        </div>
        <div class="flex flex-col items-center">
          <span class="text-2xl md:text-3xl font-light text-white mb-2">{t.stats.support.value}</span>
          <span class="text-white/70 text-sm">{t.stats.support.label}</span>
        </div>
        <div class="flex flex-col items-center">
          <span class="text-2xl md:text-3xl font-light text-white mb-2">{t.stats.privacy.value}</span>
          <span class="text-white/70 text-sm">{t.stats.privacy.label}</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer class="border-t border-white/10 py-8 mt-auto">
    <div class="container mx-auto px-4">
      <div class="text-center text-white/60">
        <p class="text-sm mb-2">{t.footer.legal}</p>
        <p class="text-xs">&copy; {new Date().getFullYear()} ConnectMe. {t.footer.copyright}</p>
      </div>
    </div>
  </footer>
</Layout>

<style>
  /* Base Styles */
  :global(body) {
    @apply m-0 p-0 min-h-screen overflow-x-hidden;
    font-family: 'Inter', system-ui, sans-serif;
  }

  /* Navigation Button */
  .nav-cta {
    @apply bg-white text-purple-700; /* Darker text on white background */
    @apply px-5 py-2;
    @apply rounded-full;
    @apply text-sm font-medium; /* Increased font weight */
    @apply transition-all duration-300;
    @apply hover:bg-purple-100;
    @apply active:scale-95;
  }

  .main-cta {
    @apply bg-white text-purple-700; /* Darker text color */
    @apply px-10 py-4;
    @apply rounded-full;
    @apply text-lg font-semibold; /* Increased font weight */
    @apply shadow-lg;
    @apply transform transition-all duration-300;
    @apply hover:shadow-xl hover:-translate-y-1;
    @apply active:scale-95;
  }

  /* Container */
  .container {
    @apply max-w-7xl mx-auto;
  }

  /* Animations */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .animate-fadeIn {
    animation: fadeIn 0.6s ease-out forwards;
  }
</style>

<script>
  // Add type annotations for the event listener
  document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener('click', function(this: HTMLAnchorElement, e: MouseEvent) {
      e.preventDefault();
      const href = this.getAttribute('href');
      if (!href) return;
      document.querySelector(href)?.scrollIntoView({
        behavior: 'smooth'
      });
    });
  });

  // Add types for Intersection Observer
  const observer = new IntersectionObserver(
    (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fadeIn');
        }
      });
    },
    { threshold: 0.1 }
  );

  // Add type for card elements
  document.querySelectorAll<HTMLElement>('.card').forEach((card) => {
    observer.observe(card);
  });
</script>
